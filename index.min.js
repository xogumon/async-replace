async function asyncReplace(r,e,o=!1){function a({message:e,value:r},a="log"){o&&"boolean"==typeof o&&console[a]&&console[a](`[async-replace] ${e}: `+r)}try{if("string"!=typeof r)throw new Error("First argument must be a string");if(null===e||Array.isArray(e)||"object"!=typeof e){if(Array.isArray(e)){for(const l of e)r=await asyncReplace(r,l);return r}throw new Error("Second argument must be an object or an array of objects")}{const{search:u,replace:i}=e,f=[];var n=new RegExp(u);r.replace(n,(...e)=>(f.push({match:e[0],values:e}),e[0])),0===f.length&&a({message:"No matches found",value:u});for(const p of f){var{match:s,values:t}=p,c="function"==typeof i?await i(...t):i instanceof Promise?await i:i;r=r.replace(s,c),a({message:"Match found",value:s}),a({message:"Replace value",value:c})}return r}}catch(e){return e instanceof Error?a({message:"Error",value:e.message},"error"):a({message:"Error",value:e},"error"),r}}if("undefined"!=typeof window)window.asyncReplace=asyncReplace;else{if("undefined"==typeof module)throw new Error("This environment is not supported");module.exports=asyncReplace}