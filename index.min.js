async function asyncReplace(e,r,a){const n=Object.assign({},{debug:!1,flags:void 0},a);var o=(e,r,a)=>{n.debug&&console[e]&&console[e](`[async-replace] ${r}:`,a instanceof Error?a.message:a)};try{if("string"!=typeof e)throw new Error('"string" must be a string');if("object"!=typeof r)throw new Error('"replacers" must be an object');if(null===r||Array.isArray(r)){if(Array.isArray(r))for(const i of r)e=await asyncReplace(e,i)}else{const{search:f,replace:l,flags:p}=r,u=[];e.replace(f instanceof RegExp?f:new RegExp(f.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),p||n.flags),(...e)=>{u.push({match:e[0],values:e})}),0===u.length&&o("info","Match","No matches found");for(var{match:s,values:c}of u){var t="function"==typeof l?await l(...c):l instanceof Promise?await l:l;o("info","Replace",`Replacing ${s} with `+t),e=e.replace(s,t)}}}catch(e){o("error","Error",e)}return e}if("undefined"!=typeof window)window.asyncReplace=asyncReplace;else{if("undefined"==typeof module)throw new Error("This environment is not supported");module.exports=asyncReplace}