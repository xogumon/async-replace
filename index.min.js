async function asyncReplace(r,e,o=!1){function a({message:e,value:r},a="log"){o&&"boolean"==typeof o&&console[a]&&console[a](`[async-replace] ${e}: `+r)}try{if("string"!=typeof r)throw new Error("First argument must be a string");if(null===e||Array.isArray(e)||"object"!=typeof e){if(Array.isArray(e)){for(const c of e)r=await asyncReplace(r,c);return r}throw new Error("Second argument must be an object or an array of objects")}{const{search:i,replace:l}=e,u=new RegExp(i).exec(r);var n,s,t=u.find(e=>e);return t?(n="function"==typeof l?await l(...u):l instanceof Promise?await l:l,s=r.replace(i,n),a({message:"Match found",value:t}),a({message:"Replace value",value:n}),s):(a({message:"No match found",value:i}),r)}}catch(e){return e instanceof Error?a({message:"Error",value:e.message},"error"):a({message:"Error",value:e},"error"),r}}if("undefined"!=typeof window)window.asyncReplace=asyncReplace;else{if("undefined"==typeof module)throw new Error("This environment is not supported");module.exports=asyncReplace}