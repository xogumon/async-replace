async function asyncReplace(r,e,o=!1){function n({message:e,value:r},n="log"){o&&console[n](`[asyncReplace] ${e}: `+r)}try{if("string"!=typeof r)throw new Error("First argument must be a string");if(null===e||Array.isArray(e)||"object"!=typeof e){if(Array.isArray(e)){for(const a of e)r=await asyncReplace(r,a);return r}throw new Error("Second argument must be an object or an array of objects")}{const{search:s,replace:c}=e;if("number"==typeof s||"string"==typeof s||s instanceof RegExp){if(s instanceof RegExp&&!s.test(r))throw new Error(`No match for "${s.toString()}"`);if(!s instanceof RegExp&&!r.includes(s))throw new Error(`No match for "${s}"`);var t;return"function"==typeof c&&"object"==typeof c()&&"function"==typeof c().then&&"function"==typeof c().catch||null!==c&&"object"==typeof c&&"function"==typeof c.then&&"function"==typeof c.catch?(t="function"==typeof c?await c():await c,n({message:"Match",value:s},"info"),n({message:"Result",value:t},"info"),r.replace(s,t)):(n({message:"Match",value:s},"info"),n({message:"Result",value:c},"info"),r.replace(s,c))}throw new Error('"search" must be a string, number, or RegExp')}}catch(e){return e instanceof Error?n({message:"Error",value:e.message},"error"):n({message:"Error",value:e},"error"),r}}if("undefined"!=typeof window)window.asyncReplace=asyncReplace;else{if("undefined"==typeof module)throw new Error("asyncReplace is not supported in this environment");module.exports=asyncReplace}