async function asyncReplace(e,n,a){const r=Object.assign({},{debug:!1,flags:void 0},a);var o=(e,n="log")=>{r.debug&&console[n]&&console[n]("[asyncReplace]",e instanceof Error?e.message:e)};try{if("string"!=typeof e)throw new Error('"string" must be a string');if("object"!=typeof n)throw new Error('"replacers" must be an object');if(null===n||Array.isArray(n)){if(Array.isArray(n))for(const l of n)e=await asyncReplace(e,l)}else{var{search:s,replace:t,flags:c}=n;const p=[];e.replace(s instanceof RegExp?s:new RegExp(s.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),c||r.flags),(...e)=>p.push(e)),0===p.length&&o("No matches found");for(const y of p){var i=y[0];const g=async e=>"function"==typeof e?await e(...y):e instanceof Promise?await e.then(async e=>g(e)):e;var f=await g(t);o(`Replacing "${i}" with "${f}"`),e=e.replace(i,f)}}}catch(e){o(e,"error")}return e}if("undefined"!=typeof window)window.asyncReplace=asyncReplace;else{if("undefined"==typeof module)throw new Error("This environment is not supported");module.exports=asyncReplace}